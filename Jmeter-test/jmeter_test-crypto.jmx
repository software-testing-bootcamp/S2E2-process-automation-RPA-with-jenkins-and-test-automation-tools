<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AUTOMATION" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="errorCounter" elementType="Argument">
              <stringProp name="Argument.name">errorCounter</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(parseInt(vars.get(&quot;errorCounter&quot;))&lt;3)}</stringProp>
        </WhileController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Sleep" enabled="true">
            <stringProp name="BeanShellSampler.query">Thread.sleep(3000);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Read Data and Insert to DB" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.Paribu" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.paribu.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ticker</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="BTC" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">BTC_lowestAsk;BTC_highestBid;BTC_volume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.BTC_TL.lowestAsk;$.BTC_TL.highestBid;$.BTC_TL.volume</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_UPDATE_coin" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE coin
SET source=&apos;Jmeter&apos;, currency=&apos;TRY&apos;, modifiedDate=&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;, lowestAsk=${BTC_lowestAsk},highestBid=${BTC_highestBid},volume=${BTC_volume} 
WHERE symbol=&apos;BTC&apos; AND marketId=(SELECT Id FROM market WHERE marketName=&apos;Paribu&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_INSERT_coin_history" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">INSERT INTO coin_history (Id, coinId, currency, lowestAsk, highestBid, volume, source, marketId, createdDate) 
VALUES (NULL, (SELECT Id FROM coin WHERE symbol=&apos;BTC&apos; AND MarketId=1 LIMIT 1), &apos;TRY&apos;, ${BTC_lowestAsk}, ${BTC_highestBid}, ${BTC_volume},&apos;Jmeter&apos;,1,&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.BtcTurk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.btcturk.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v2/ticker</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">DDoS protection by Cloudflare</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="BTC" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">BTC_lowestAsk;BTC_highestBid;BTC_volume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.[?(@.pair == &apos;BTCTRY&apos;)].ask;$.data.[?(@.pair == &apos;BTCTRY&apos;)].bid;$.data.[?(@.pair == &apos;BTCTRY&apos;)].volume</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_UPDATE_coin" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE coin
SET source=&apos;Jmeter&apos;, currency=&apos;TRY&apos;, modifiedDate=&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;, lowestAsk=${BTC_lowestAsk},highestBid=${BTC_highestBid},volume=${BTC_volume} 
WHERE symbol=&apos;BTC&apos; AND marketId=(SELECT Id FROM market WHERE marketName=&apos;BTCTurk&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_INSERT_coin_history" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">INSERT INTO coin_history (Id, coinId, currency, lowestAsk, highestBid, volume, source, marketId, createdDate) 
VALUES (NULL, (SELECT Id FROM coin WHERE symbol=&apos;BTC&apos; AND MarketId=2 LIMIT 1), &apos;TRY&apos;, ${BTC_lowestAsk}, ${BTC_highestBid}, ${BTC_volume},&apos;Jmeter&apos;,2,&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API.Binance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.binance.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/v3/ticker/24hr</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">?symbol=BTCTRY</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="BTC" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">BTC_lowestAsk;BTC_highestBid;BTC_volume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[?(@.symbol == &apos;BTCTRY&apos;)].askPrice;$.[?(@.symbol == &apos;BTCTRY&apos;)].bidPrice;$.[?(@.symbol == &apos;BTCTRY&apos;)].volume</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1;1;1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_UPDATE_coin" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE coin
SET source=&apos;Jmeter&apos;, currency=&apos;TRY&apos;, modifiedDate=&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;, lowestAsk=${BTC_lowestAsk},highestBid=${BTC_highestBid},volume=${BTC_volume} 
WHERE symbol=&apos;BTC&apos; AND marketId=(SELECT Id FROM market WHERE marketName=&apos;Binance&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_INSERT_coin_history" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">INSERT INTO coin_history (Id, coinId, currency, lowestAsk, highestBid, volume, source, marketId, createdDate) 
VALUES (NULL, (SELECT Id FROM coin WHERE symbol=&apos;BTC&apos; AND MarketId=3 LIMIT 1), &apos;TRY&apos;, ${BTC_lowestAsk}, ${BTC_highestBid}, ${BTC_volume},&apos;Jmeter&apos;,3,&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WEB.CoinMarketCap" enabled="true">
              <stringProp name="WebDriverSampler.script">import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;


WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
//WDS.sampleResult.getLatency();
//WDS.log.info(&quot;Sample started&quot;);

String baseUrl = &quot;https://coinmarketcap.com&quot;;

WDS.browser.get(baseUrl + &quot;/currencies/bitcoin/&quot;);
Thread.sleep(3000);
WDS.browser.findElement(By.xpath(&quot;//button[@title=&apos;Select Currency&apos;]&quot;)).click();
Thread.sleep(1000);
WDS.browser.findElement(By.xpath(&quot;//input[@placeholder=&apos;Search&apos;]&quot;)).sendKeys(new String[] { &quot;TRY&quot; });
Thread.sleep(2000);
WDS.browser.findElement(By.xpath(&quot;//span[contains(text(),&apos;TRY&apos;)]&quot;)).click();
Thread.sleep(3000);
String btcPrice = WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;priceValue smallerPrice&apos;]&quot;)).getText();

WDS.vars.put(&quot;btcPrice&quot;,btcPrice);
WDS.log.info(btcPrice);

WDS.sampleResult.sampleEnd();
// 3. Verify the results
//if(WDS.browser.getTitle() != &quot;Bitcoin&quot;) {
//    WDS.sampleResult.setSuccessful(false);
//    WDS.sampleResult.setResponseMessage(&quot;Expected title to be Bitcoin&quot;);
//}</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">java</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BTC_volume" enabled="true">
                <stringProp name="TestPlan.comments">otal Bitcoins in circulation:&lt;/b&gt;&lt;/td&gt;&lt;td align = &quot;right&quot;&gt;17,651,913&lt;/td&gt;&lt;/t</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BTC_volume</stringProp>
                <stringProp name="RegexExtractor.regex">Bitcoin&quot;,&quot;currency&quot;:&quot;TRY&quot;(.+?)volume&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BTC_ask" enabled="true">
                <stringProp name="TestPlan.comments">otal Bitcoins in circulation:&lt;/b&gt;&lt;/td&gt;&lt;td align = &quot;right&quot;&gt;17,651,913&lt;/td&gt;&lt;/t</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BTC_lowestAsk</stringProp>
                <stringProp name="RegexExtractor.regex">Bitcoin&quot;,&quot;currency&quot;:&quot;TRY&quot;(.+?)ask&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BTC_bid" enabled="true">
                <stringProp name="TestPlan.comments">otal Bitcoins in circulation:&lt;/b&gt;&lt;/td&gt;&lt;td align = &quot;right&quot;&gt;17,651,913&lt;/td&gt;&lt;/t</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">BTC_highestBid</stringProp>
                <stringProp name="RegexExtractor.regex">Bitcoin&quot;,&quot;currency&quot;:&quot;TRY&quot;(.+?)bid&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_UPDATE_coin" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">UPDATE coin
SET source=&apos;Jmeter&apos;, currency=&apos;TRY&apos;, modifiedDate=&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;, lowestAsk=&apos;${btcPrice}&apos;,highestBid=&apos;${btcPrice}&apos;,volume=&apos;${btcPrice}&apos; 
WHERE symbol=&apos;BTC&apos; AND marketId=&apos;5&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_INSERT_coin_history" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">INSERT INTO coin_history (Id, coinId, currency, lowestAsk, highestBid, volume, source, marketId, createdDate) 
VALUES (NULL, (SELECT Id FROM coin WHERE symbol=&apos;BTC&apos; AND MarketId=5 LIMIT 1), &apos;TRY&apos;, &apos;${btcPrice}&apos;, &apos;${btcPrice}&apos;, &apos;${btcPrice}&apos;,&apos;Jmeter&apos;,5,&apos;${__time(yyyy-MM-dd HH:mm:ss)}&apos;);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command"></stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="SSH Command" enabled="false">
              <stringProp name="command">date</stringProp>
              <intProp name="connectionTimeout">5000</intProp>
              <stringProp name="hostname"></stringProp>
              <stringProp name="passphrase"></stringProp>
              <stringProp name="password"></stringProp>
              <intProp name="port">22</intProp>
              <boolProp name="printStdErr">true</boolProp>
              <stringProp name="sshkeyfile"></stringProp>
              <boolProp name="useReturnCode">true</boolProp>
              <boolProp name="useTty">false</boolProp>
              <stringProp name="username"></stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Insert to CSV" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SQL_SELECT_coin_history" enabled="true">
              <stringProp name="dataSource">mysqlcon</stringProp>
              <stringProp name="query">SELECT * FROM coin_history</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="errorCounter" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">if (!(prev.isSuccessful())) {
int counter = Integer.parseInt(vars.get(&quot;errorCounter&quot;)) +1;
vars.put(&quot;errorCounter&quot;,Integer.toString(counter));
//prev.setSuccessful(false);
//prev.setStopTestNow(true);
//log.error(&quot;my message&quot;);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">/Users/ozgur.kaya/Downloads/SoftwareTestingBootcamp/3/CSV-Files/CSVData_</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">true</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">true</boolProp>
              <boolProp name="FileSaver.ignoreTC">false</boolProp>
              <boolProp name="FileSaver.addTimstamp">true</boolProp>
            </ResultSaver>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Post Steps" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Discord Message" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;content&quot;: &quot;Error on Process Automation. Check your email for details&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">discord.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/webhooks/94812315178343434343220826636/iOEziewR91yyahesasd234234slf6wV2DuBogYW9lsEuwS7Pr4_1KlLfwOL</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="Send Email Notification" enabled="true">
            <stringProp name="SMTPSampler.server">smtp.gmail.com</stringProp>
            <stringProp name="SMTPSampler.serverPort">587</stringProp>
            <stringProp name="SMTPSampler.mailFrom">yourmail@gmail.com</stringProp>
            <stringProp name="SMTPSampler.replyTo"></stringProp>
            <stringProp name="SMTPSampler.receiverTo">marotok618@toudrum.com</stringProp>
            <stringProp name="SMTPSampler.receiverCC"></stringProp>
            <stringProp name="SMTPSampler.receiverBCC"></stringProp>
            <stringProp name="SMTPSampler.subject">ALERT - Process Automation has been failed</stringProp>
            <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
            <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
            <stringProp name="SMTPSampler.message">Test desc
</stringProp>
            <stringProp name="SMTPSampler.plainBody">false</stringProp>
            <stringProp name="SMTPSampler.attachFile"></stringProp>
            <stringProp name="SMTPSampler.useSSL">false</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">true</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
            <stringProp name="SMTPSampler.tlsProtocols"></stringProp>
            <boolProp name="SMTPSampler.use_eml">false</boolProp>
            <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
            <stringProp name="SMTPSampler.useAuth">true</stringProp>
            <stringProp name="SMTPSampler.password">wdfsf3443*</stringProp>
            <stringProp name="SMTPSampler.username">yourmail@gmail.com</stringProp>
            <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
            <stringProp name="SMTPSampler.enableDebug">false</stringProp>
            <collectionProp name="SMTPSampler.headerFields"/>
          </SmtpSampler>
          <hashTree/>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSFTPSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSFTPSampler" testname="Copy File to FTP" enabled="false">
            <stringProp name="action">put</stringProp>
            <intProp name="connectionTimeout">15000</intProp>
            <stringProp name="destination"></stringProp>
            <stringProp name="hostname">sftp.mysite.com</stringProp>
            <stringProp name="passphrase"></stringProp>
            <stringProp name="password">mypassword</stringProp>
            <intProp name="port">22</intProp>
            <boolProp name="printFile">true</boolProp>
            <stringProp name="source">/MY_PATH/my.csv</stringProp>
            <stringProp name="sshkeyfile"></stringProp>
            <stringProp name="username">myuser</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSFTPSampler>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
              <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
              <stringProp name="SizeAssertion.size">${minFileSize}</stringProp>
              <intProp name="SizeAssertion.operator">3</intProp>
            </SizeAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">true</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename">${logPath}\ykb-ftp-healthcheck-output-${currentDate}.csv</stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Stop Process Now" enabled="true">
            <stringProp name="BeanShellSampler.query">ctx.getEngine().stopTest();
//System.exit(1);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">7777</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC.MySQL" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">mysqlcon</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://127.0.0.1:3306/coin_test?characterEncoding=utf8</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">1212121</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">tester</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
        <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/ozgur.kaya/Downloads/SoftwareTestingBootcamp/3/chromedriver</stringProp>
        <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
        <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
        <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="ErrorLogs" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/Users/ozgur.kaya/Downloads/SoftwareTestingBootcamp/3/ERROR-Logs/error_log.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
